import 'dart:math';

class VulnElement {
  String text;

  VulnElement({required this.text});
}

class VulnQuestion extends VulnElement {
  double val;
  VulnQuestion(this.val, text) : super(text: text);
}

class VulnHeading extends VulnElement {
  bool big;
  VulnHeading(this.big, text) : super(text: text);
}

List<VulnElement> getFormVulnElements(List<VulnElement> possible, String mask) {
  List<VulnElement> res = [];
  for (int bit = 0; bit < possible.length; bit++) {
    if (mask[bit] == "1") {
      res.add(possible[bit]);
    }
  }
  return res;
}

double economicLoss(List<bool> checks, String mask) {
  List<VulnElement> elements = getFormVulnElements(possibleEconomic, mask);
  double total = 0;
  double perBigHeadingTotal = 0;
  int bigHeadingIdx = 0;
  const List<double> limits = [5, 5, 50, 20, 20];

  for (int i = 0; i < elements.length; i++) {
    if (checks[i] == true && elements[i].runtimeType == VulnQuestion) {
      VulnQuestion element = elements[i] as VulnQuestion;
      perBigHeadingTotal += element.val;
    }
    if (elements[i].runtimeType == VulnHeading) {
      VulnHeading element = elements[i] as VulnHeading;
      if (element.big) {
        total += min(perBigHeadingTotal, limits[bigHeadingIdx]);
        perBigHeadingTotal = 0;
        bigHeadingIdx++;
      }
    }
  }
  total += min(perBigHeadingTotal, limits[bigHeadingIdx]);
  return (total / 100);
}

double isLifeThreatening(List<bool> checks, String mask) {
  List<VulnElement> elements = getFormVulnElements(possibleLifeThreatening, mask);
  double total = 0;

  for (int i = 0; i < elements.length; i++) {
    if (checks[i] == true && elements[i].runtimeType == VulnQuestion) {
      VulnQuestion element = elements[i] as VulnQuestion;
      total += 1;
    }
  }
  return total;
}

final List<VulnElement> possibleEconomic = [
  // Siting Issues (limit 5)
  VulnHeading(true, "Siting Issues"),
  VulnQuestion(5,
      "The building is built on sloped ground with access at two or more levels, i.e., at ground, intermediate floor & roof"),

  // Soil and Foundation Condition (limit 20)
  VulnHeading(true, "Soil and Foundation Conditions"),
  VulnHeading(false, "Suitability of soil type"),
  VulnQuestion(2, "Soft soil"),
  VulnQuestion(2, "Weak soil"),
  VulnQuestion(1, "High water table"),
  VulnQuestion(2, "Soil with moisture"),
];

final List<VulnElement> possibleLifeThreatening = [
  // 0 - Siting Issues
  VulnHeading(true, "Siting Issues"),
  VulnQuestion(0, "The building is built on hill slopes that can slide"),
  VulnQuestion(0, "The building is built on river terraces that can slide/creep"),
  VulnQuestion(0,
      "The building is built on hill slopes /adjacent to hill slopes (even though on flat ground), but vulnerable to falling debris from the hill top"),

  // 4 - Soil and Foundation Condition
  VulnHeading(true, "Soil and Foundation Conditions"),
  VulnQuestion(0, "The soil underneath the building is liquefiable"),
  VulnQuestion(0,
      "The soil in the area adjoining the site is liquefiable and can flow laterally to move the soil from underneath the building"),
];

const List<String> ecoVulnElementMask = [
  "11111111",
  "11111110",
  "11111111",
];
const List<String> lifeVulnElementMask = [
  "1111111",
  "1110110",
  "1111111",
];
